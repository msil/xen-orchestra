/* eslint-env jest */

import { forEach } from 'lodash'

import { match, patch } from './mp-atch'

// ===================================================================

describe('match()', () => {
  const data = {
    'matches object properties': {
      pattern: { foo: 'bar' },
      nope: [
        null,
        { },
        { foo: 'baz' },
      ],
      yep: [
        { foo: 'bar' },
        { foo: 'bar', bar: 'baz' },
      ],
    },
    'matches set items': {
      pattern: [ 'foo', 'bar' ],
      nope: [
        [],
        [ 'foo' ],
        [ 'bar' ],
        [ 'foo', 'baz' ],
      ],
      yep: [
        [ 'bar', 'foo' ],
        [ 'bar', 'baz', 'foo' ],
      ],
    },
    'supports a __or operator': {
      pattern: { __or: [
        'foo',
        { },
      ] },
      nope: [
        'bar',
        [],
      ],
      yep: [
        'foo',
        { 'foo': 'bar' },
      ],
    },
  }

  forEach(data, ({ pattern, nope, yep }, desc) => {
    if (!pattern) {
      it(desc)
    } else {
      it(desc, () => {
        forEach(nope, value => {
          expect(match(pattern, value)).toBe(false)
        })
        forEach(yep, value => {
          expect(match(pattern, value)).toBe(true)
        })
      })
    }
  })

  it('supports a __not operator', () => {
    forEach(data, ({ pattern, nope, yep }) => {
      if (!pattern) {
        return
      }

      pattern = { __not: pattern }

      forEach(nope, value => {
        expect(match(pattern, value)).toBe(true)
      })
      forEach(yep, value => {
        expect(match(pattern, value)).toBe(false)
      })
    })
  })
})

describe('patch', () => {
  it('can patch arrays', () => {
    expect(patch(
      [ 'foo', 'bar', 'quuz' ],
      { 0: null, '-': 'quuz', '+': [ 'baz' ] }
    )).toEqual(
      [ 'bar', 'baz' ]
    )
  })

  it('can patch objects', () => {
    expect(patch(
      { foo: 1, bar: 2 },
      { foo: null, bar: 3, baz: 4 }
    )).toEqual(
      { bar: 3, baz: 4 }
    )
  })
})
